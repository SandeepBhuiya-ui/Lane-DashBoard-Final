# -*- coding: utf-8 -*-
"""Lane Visualization

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fZgV80RpdRsghS4rSAcW81dSfMN0qisn
"""

import streamlit as st
import pandas as pd
import plotly.express as px

# Load and preprocess the data
@st.cache_data
def load_data():
    # Load the data from your file
    df = pd.read_csv('Density Building exercise - Sheet1.csv')

    # Strip any leading/trailing spaces from column names
    df.columns = df.columns.str.strip()

    # Convert columns with dollar signs to numeric using raw string to avoid invalid escape sequence
    df['Carrier Cost'] = pd.to_numeric(df['Carrier Cost'].replace(r'[\$,]', '', regex=True), errors='coerce')
    df['Revenue'] = pd.to_numeric(df['Revenue'].replace(r'[\$,]', '', regex=True), errors='coerce')

    # Convert date columns to datetime
    df['Pickup Date'] = pd.to_datetime(df['Pickup Date'], errors='coerce')
    df['Pickup Time'] = pd.to_datetime(df['Pickup Time'], errors='coerce')
    df['Dropoff Time'] = pd.to_datetime(df['Dropoff Time'], errors='coerce')

    return df

data = load_data()

# Title and Introduction
st.title('Lane Performance Dashboard')
st.markdown('An interactive dashboard to analyze lane performance and customer engagement.')

# Sidebar for selecting lane and customer filters
st.sidebar.header('Filter Options')
selected_customer = st.sidebar.selectbox('Select a Customer:', data['Customer Name'].unique())
selected_lane = st.sidebar.selectbox('Select a Lane:', data['Lane'].unique())

# Filter data based on user input
filtered_data = data[(data['Customer Name'] == selected_customer) & (data['Lane'] == selected_lane)]

# Display filtered data
st.subheader(f'Performance Data for {selected_customer} on Lane {selected_lane}')
st.write(filtered_data)

# Visualize the lane performance
st.subheader('Lane Performance Overview')
fig = px.bar(filtered_data, x='Pickup Date', y=['Carrier Cost', 'Revenue'],
             title='Carrier Cost and Revenue Over Time', barmode='group')
st.plotly_chart(fig)

# Display basic metrics
total_pieces_or_pallets = filtered_data['Pieces or Pallets'].sum()
average_carrier_cost = filtered_data['Carrier Cost'].mean()
average_revenue = filtered_data['Revenue'].mean()

st.markdown(f"**Total Pieces or Pallets:** {total_pieces_or_pallets}")
st.markdown(f"**Average Carrier Cost:** ${average_carrier_cost:.2f}" if not pd.isna(average_carrier_cost) else "**Average Carrier Cost:** Data Not Available")
st.markdown(f"**Average Revenue:** ${average_revenue:.2f}" if not pd.isna(average_revenue) else "**Average Revenue:** Data Not Available")

# Interactive pricing strategy input
st.subheader('Pricing Strategy')

# Ensure that max_value is a float and greater than min_value
if pd.isna(average_revenue) or average_revenue == 0:
    max_price = 100.0  # Set a default max price if revenue is missing or zero
else:
    max_price = float(2 * average_revenue)

default_price = float(average_revenue if not pd.isna(average_revenue) else 0.0)

new_price = st.slider('Set Proposed New Price per Piece or Pallet:', min_value=0.0, max_value=max_price, value=min(default_price, max_price))
potential_revenue = new_price * total_pieces_or_pallets

st.markdown(f"**Potential Revenue if re-run at new price:** ${potential_revenue:.2f}")

# Allow download of filtered data
st.download_button(
    label="Download Filtered Data as CSV",
    data=filtered_data.to_csv(index=False),
    file_name=f'{selected_customer}_{selected_lane}_data.csv',
    mime='text/csv'
)

